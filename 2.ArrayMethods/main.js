// push() - метод массива который добавляет один или более элементов в конец массива
//          и взвращает новую длинну массива (мутабельный)

const names = ['Alex', 'Bob', 'Ivan', 'Sasha']
const total = names.push('Nina')

console.log('names', names) // 'Alex', 'Bob', 'Ivan', 'Sasha', 'Nina'
console.log('total', total) // 5


// pop() - удаляет последний элемент массива и возвращает его значение (мутабельный)

// shift() - удалаяет первый элемент из массива и возвращает его значение (мутабельный)

// unshift() - добавляет один или более элементов в начало массива и возвращает
//           новую длинну массива (мутабельный)

// reverse() - меняет порядок элементов в массиве на обратный (мутабельный)

// split() - разбивает строки в массив по указанному в первом параметре разделителю.
//           Если он не задан возвращает всю строку. Вторым не обязательным параметром
//           можно задать максимальное количество элементов в получившемся массиве

// join() - объединяет элементы массива в строку с указанным разделителем (он будет
//           вставлен между элементами массива). Разделитель задается параметром метода
//           и не является обязательным. Если он не задан - по умолчанию будет запятая.
//           Если надо слить элементы в строку надо задать его как "".

// concat() - метод массива сливает указанные массивы в один общий массив. Метод 
//           применяется к одному из массивов, а в параметрах метода передаются остальные
//           массивы для слияния. При этом метод не изменяет исходный массив, а возвращает
//           новый. Если передать массив с вложенными массивами, они также будут объединены
//           в новый массив. Вложенные массивы не будут раскрыты или сплющены, они будут
//           сохранены внутри нового массива как элемент.
const arr1 = [1, 2]
const arr2 = [3, 4]
const arr3 = [5, 6]
const res = arr1.concat(arr2, arr3) // [1, 2, 3, 4, 5, 6]

// flat(infinity) - [1, 2, 3, [4, 5, 6]] => [1, 2, 3, 4, 5, 6]

// forEach() - позволяет последовательно перебрать все элементы массива. Метод в парамете
//          получает функцию, которая выполнится для каждого элемента массива. В эту
//          функцию можно передать три параметра. Если эти параметры есть (они не обязательны)
//          то в первый параметр попадает элемент массива, во второй индекс, в третий 
//          сам массив.

// indexOf() - осуществляет поиск элемента в массиве. В первом параметре указывается 
//          номер позиции искомого символа. Метод возвращает номер первого найденого 
//          элемента, либо -1, если такого элемента нет. Второй не обязательный
//          параметр задает позицию с которой надо начинать поиск.

// lastIndexOf() - осуществляет поиск элемента в массиве. Возвращает номер последнего
//          найденого элемента, либо -1, если такого элемента нет. Второй не обязательный
//          параметр задает позицию с которой надо начинать поиск. Поиск ведется с 
//          конца массива.

// find() - помогает найти первый элемент в массиве согласно переданному в параметру коллбэку.
//          Если элемента нет возвращает undefined.

// findIndex() - позволяет найти индекс первого элемента согласно переданному в параметре
//          коллбэку. Если элемент не найден возвращает -1.
// findLastIndex() - тоже что и findIndex() только с конца массива.

// includes() - проверяет наличие элемента в массиве. Параметром принимает значение для 
//          поиска. Если такой элемент есть => true иначе false.

// filter() - позволяет отфильтровать элементы массива, оставив только подходящие под
//          определенное условие элементы. Метод в параметре получает функцию,
//          которая выполниться для каждого элемента массива. Своим результатом 
//          метод возвращает новый массив, в который войдут только те элементы, для
//          которых переданная функция вернет true.

// sort() - на месте сортирует элементы массива и возвращает отсортированный массив.
//          порядок сортировки по умолчанию соответствует порядку кодовых 
//          точек Unicode.
// toSorted () - тоже что и sort() только иммутабельный.

// map() - позволяет применить заданную функцию для каждого элемента массива.
//          При этом метод не изменяет исходный массив, а возвращает новый.
//          Получает в параметр функцию которая выполниться для каждого элемента.
//          То что вернет эта функция через return для элемента массива, то и станет
//          новым значением элемента.

// Полифил - это код, который создан для предоставления функциональности, которая может
//          быть отсутствующей в старых браузерах или окружении кода. Если у вас есть 
//          новая функция, которую вы хотите использовать, но она не работает в старых
//          браузерах, полифил представляет собой кусок кода, который делает ту же работу, 
//          но в старом стиле, чтобы ваш код всегда работал так, как вы ожидаете, даже
//          если старые браузеры не знают о новых функциях.

// реализация map() 
function newMap(arr, callback) {
    const result = []
    for (let i = 0; i < arr.length; i++) {
        result.push(callback(arr[i]))
    }
    return result
}